package main

//
// a MR application you need to develop
// go build -buildmode=plugin credit.go
//

import (
	"cs350/mr"
	"encoding/csv"
	"strconv"
	"strings"
)

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	var intermediate []mr.KeyValue
	reader := csv.NewReader(strings.NewReader(contents))
	/*SHOULD BE COLUMN NAMES*/
	_, err := reader.Read()
	if err != nil {
		return nil
	}
	// fmt.Println("HEADERS: ", headers)
	for {
		row, err := reader.Read()
		if err != nil {
			if err.Error() == "EOF" {
				break
			}
			return nil
		}
		company := row[1]
		// fmt.Println("COMPANY: ", company)
		/*ATOI CONVERTS STRING TO INT*/
		year, err := strconv.Atoi(row[2])
		creditScore, err := strconv.Atoi(row[3])
		// fmt.Println("CREDIT SCORE: ", creditScore)
		if year == 2023 && creditScore > 400 {
			intermediate = append(intermediate, mr.KeyValue{Key: company, Value: "1"})
			// fmt.Println("CREDIT SCORE", creditScore, "WAS ADDED TO LIST")
		}
	}
	// fmt.Println(intermediate)
	return intermediate
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	result := 0
	for _, value := range values {
		valueInt, _ := strconv.Atoi(value)
		result += valueInt
		// fmt.Println("ADDED VALUE ", valueInt, ", RESULT IS NOW ", result)
	}
	/*ITOA CONVERTS INT TO STRING*/
	return strconv.Itoa(result)
}
